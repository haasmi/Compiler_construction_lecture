grammar Pipifax;
prg : expressions+;
expressions: vardef | function | funcCall | assignment;
identifier : ID;
integer : '-'? INT;
pidouble : '-'? DOUBLE;
string : STRING;
array : ARRAY integer | pidouble | string;
reference : '*' typeORef;
typeORef : integer | pidouble | string | array;
types : integer | pidouble | string | array | reference;
typesKey : 'int' | 'double' | 'string' | ('[' INT  ']') typesKey;
parameters : identifier types;
vardef : 'var' identifier typesKey ( '=' types)?;
funcCall : identifier '(' types? (',' types)* ')';
assignment : identifier '=' (funcCall | types);
var: identifier | types;
condition: var | var operator var;
ifStatement : 'if' condition '{' statements+ '}' ('else' '{' statements+ '}')?;
statements : vardef | funcCall | assignment | ifStatement;
body : '{' statements+ '}';
function : 'func' identifier '(' parameters? ')' types? body;
operator: '+'| '-' | '^' | '/' | '<' | '<=' | '>' | '>=' ;

COMMENT: [#] .* [\n] -> skip;
ARRAY : ('['[1-9]']')*;
STRING : ["] (~["])* ["];
DOUBLE : [0-9]*([.][0-9]*)?([Ee][+-]?[1-9][0-9]*)?;
INT : [1-9][0-9]*;
ID : [_a-zA-Z][a-zA-Z0-9_]*;
WHITE : [ \t\r\n]+ -> skip;
ASCII : [a-zA-Z0-9,. :;()]*;
HASH : [#];